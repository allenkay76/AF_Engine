{
    "tasks": [
        {
            // Defines a task named "clean"
            "label": "clean",
            // Specifies that the task is a shell command
            "type": "shell",
            // Defines the command to run to clean the workspace
            "command": "${command:clean}",
            // Specifies any arguments to pass to the command
            "args": [
                "${args:clean}"
            ],
            // Defines the problem matcher used to capture output messages and errors from the task
            "problemMatcher": [],
            // Specifies that this task belongs to the "build" group
            "group": "build",
            // Defines how to clean the workspace on Windows
            "windows": {
                // Specifies the command prompt as the command to run
                "command": "cmd",
                // Defines the arguments to pass to the command prompt to remove the files and folders
                "args": [
                    "/C", // Run the command within a cmd.exe shell
                    "del", // The command to delete files
                    "/F", // Forces deletion of read-only files
                    "/Q", // Quiet mode, do not ask for confirmation
                    "${workspaceFolder}/bin/*", // The path to the object files to delete
                ]
            },
            // Defines how to clean the workspace on Linux
            "linux": {
                // Specifies the command to run to remove the files and folders
                "command": "rm",
                // Defines the arguments to pass to the command to remove the files and folders
                "args": [
                    "-f",
                    "${workspaceFolder}/bin/AF_Engine"
                ]
            }
        },
        {
            // Define the task as a shell command that builds the project with g++
            "type": "shell",
            "label": "BUILD_AF_Engine_Win32_DEBUG",
            "command": "g++",
            
            // Define the arguments to pass to the command
            "args": [
                "-fdiagnostics-color=always",   // Enable color output for diagnostics
                "-g",                           // Enable debugging information
                "-I${workspaceFolder}/include", // Add the include directory to the search path
                "-I${workspaceFolder}/../mingw_dev_lib/i686-w64-mingw32/include/SDL2", // Add the SDL2 include directory to the search path
                "-L${workspaceFolder}/../mingw_dev_lib/i686-w64-mingw32/lib", // Add the SDL2 library directory to the search path
                "${workspaceFolder}/src/*.cpp",  // Compile all .cpp files in the src directory
                "${workspaceFolder}/src/**/*.cpp", // Also compile all .cpp files in any subdirectories of the src directory
                "-lmingw32",    // Link against the mingw32 library
                "-lSDL2main",   // Link against the SDL2main library
                "-lSDL2",       // Link against the SDL2 library
                "-mwindows",    // Build a GUI application for Windows
                "-Wall",        // Enable all warnings
                "-Wextra",      // Enable extra warnings not covered by -Wall
                "-Werror",    // Treat warnings as errors
                "-pedantic",    // Enable warnings for non-standard code
                //"-Wconversion", // Enable warnings for type conversions that may change values
                "-Wformat-security", // Enable warnings for potential format string vulnerabilities
                "-Wnull-dereference", // Enable warnings for null dereferences
                //"-Wdouble-promotion", // Enable warnings for floating point type promotions
                "-Wshadow",     // Enable warnings for variable shadowing
                "-fstack-protector-strong", // Enable stack protection against buffer overflow attacks
                "-D_FORTIFY_SOURCE=2",      // Enable runtime buffer overflow protection
                
                "-o",           // Specify the output file name
                "${workspaceFolder}/bin/AF_Engine"
            ],
            
            // Set the current working directory to the workspace folder
            "options": {
                "cwd": "${workspaceFolder}"
            },
            
            // Define the problem matcher to use for error reporting
            "problemMatcher": [
                "$gcc"
            ],
            
            // Set the task as the default build task for the workspace
            "group": {
                "kind": "build",
                "isDefault": true
            },
            
            // Provide additional information about the task
            "detail": "Task generated by Debugger.",
            
            // Define that the task depends on the "clean" task
            "dependsOn": "clean",
            
            // Define additional arguments to use on Linux systems
            "linux": {
                "args": [
                    "-pthread"
                ]
            },
            
            // Define additional arguments to use on Windows systems
            "windows": {
                "args": [
                    "-DSDL_GAME_RENDERER", //This is a flag to tell the engine to use the SDL renderer
                    //"-lmingw32",
                    //"-lSDL2main",
                    //"-mwindows",
                    //"-mconsole"
                ]
            },
            
            // Define any additional environment variables to set
            "env": {
                "PATH": "${env.PATH};${workspaceFolder}/bin"
            }
        },
        {
            "type": "shell",
            "label": "BUILD_AF_Engine_Win32_RELEASE",
            "command": "g++",
            "args": [
                "-fdiagnostics-color=always",
                "-O3", //optimise for speed
                "-fdiagnostics-color=always",
                "-g",
                "-I${workspaceFolder}/include",
                "-I${workspaceFolder}/../SDK/mingw_dev_lib/i686-w64-mingw32/include/SDL2",
                "-L${workspaceFolder}/../SDK/mingw_dev_lib/i686-w64-mingw32/lib",
                "${workspaceFolder}/src/*.cpp",
                "${workspaceFolder}/src/**/*.cpp", //Always ensure this comes before loading the SDL Libraries
                "-lmingw32",
                "-lSDL2main",
                "-lSDL2",
                "-mwindows",
                "-Wall",
                "-Wextra",
                "-Werror",
                "-pedantic",
                "-Wconversion",
                "-Wformat-security",
                "-Wnull-dereference",
                "-Wdouble-promotion",
                "-Wshadow",
                "-fstack-protector-strong",
                "-D_FORTIFY_SOURCE=2",
                "-DSDL_GAME_RENDERER", //This is a flag to tell the engine to use the SDL renderer
                "-o",
                "${workspaceFolder}/bin/AF_Engine",
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "problemMatcher": [
                "$gcc"
            ],
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "detail": "Task generated by Debugger.",
            "dependsOn": "clean"
        },
        {
            // Define the task as a shell command that builds the project with g++
            "type": "shell",
            "label": "BUIILD_AF_Engine_DUBUG_DLL",
            "command": "g++",
            
            // Define the arguments to pass to the command
            "args": [
                "-fdiagnostics-color=always",   // Enable color output for diagnostics
                "-g",                           // Enable debugging information
                "-I${workspaceFolder}/include", // Add the include directory to the search path
                "-I${workspaceFolder}/../SDK/mingw_dev_lib/i686-w64-mingw32/include/SDL2", // Add the SDL2 include directory to the search path
                "-L${workspaceFolder}/../SDK/mingw_dev_lib/i686-w64-mingw32/lib", // Add the SDL2 library directory to the search path
                "-I${workspaceFolder}/../SDK/glew-2.1.0/include", // Add the GLEW library directory to the search path
                "-L${workspaceFolder}/../SDK/glew-2.1.0/lib", // Add the GLEW library directory to the search path
                //"${workspaceFolder}/src/*.cpp",  // Compile all .cpp files in the src directory
                "${workspaceFolder}/src/**/*.cpp", // Also compile all .cpp files in any subdirectories of the src directory
                "-lmingw32",    // Link against the mingw32 library
                "-lSDL2main",   // Link against the SDL2main library
                "-lSDL2",       // Link against the SDL2 library
                "-lopengl32",   // Link against the opengl32 library
                "-lglu32",      // Link against the glu32 library
                "-lglew32",     // Link against the glew32 library
                "-mwindows",    // Build a GUI application for Windows
                //"-mconsole",    // Build a console application for Windows
                "-Wall",        // Enable all warnings
                "-Wextra",      // Enable extra warnings not covered by -Wall
                "-Werror",    // Treat warnings as errors
                "-pedantic",    // Enable warnings for non-standard code
                //"-Wconversion", // Enable warnings for type conversions that may change values
                "-Wformat-security", // Enable warnings for potential format string vulnerabilities
                "-Wnull-dereference", // Enable warnings for null dereferences
                //"-Wdouble-promotion", // Enable warnings for floating point type promotions
                "-Wshadow",     // Enable warnings for variable shadowing
                "-fstack-protector-strong", // Enable stack protection against buffer overflow attacks
                "-D_FORTIFY_SOURCE=2",      // Enable runtime buffer overflow protection
                "-DSDL_GAME_RENDERER", //This is a flag to tell the engine to use the SDL renderer
                "-shared",      // Build a shared library
                //"-DAF_ENGINE_EXPORTS", // Define the AF_ENGINE_EXPORTS macro
                "-o",           // Specify the output file name
                "${workspaceFolder}/bin/AF_Engine.dll"  // Specify the output file name
            ],
            
            // Set the current working directory to the workspace folder
            "options": {
                "cwd": "${workspaceFolder}"
            },
            
            // Define the problem matcher to use for error reporting
            "problemMatcher": [
                "$gcc",
                {
                    "owner": "cpp",
                    "severity": "warning",
                    "fileLocation": "absolute",
                    "pattern": {
                        "regexp": "^(.*):(\\d+):(\\d+):\\s+(warning):\\s+(.*)$",
                        "file": 1,
                        "line": 2,
                        "column": 3,
                        "severity": 4,
                        "message": 5
                    }
                }
            ],
            
            // Set the task as the default build task for the workspace
            "group": {
                "kind": "build",
                "isDefault": true
            },
            
            // Provide additional information about the task
            "detail": "Compiles the AF_Engine library with g++ for Windows",
            
            // Define that the task depends on the "clean" task
            "dependsOn": "clean",
            
            // Define additional arguments to use on Linux systems
            "linux": {
                "args": [
                    "-pthread"
                ]
            },
            
            // Define additional arguments to use on Windows systems
            "windows": {
                "args": [
                    
                    //"-lmingw32",
                    //"-lSDL2main",
                    //"-mwindows",
                    //"-mconsole"
                ]
            },
            
            // Define any additional environment variables to set
            "env": {
                "PATH": "${env.PATH};${workspaceFolder}/bin"
            }
        }
    ],
    "version": "2.0.0"
}
